name: Build Image & deploy to Amazon ECS

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-south-2
  ECR_REPOSITORY: test-ecr
  ECS_SERVICE: ecs_service
  ECS_CLUSTER: ecs_cluster
  CONTAINER_NAME: test_task_container
  ECS_TASK_DEFINITION: .aws/task-definition.json
  IMAGE_TAG: "v1.1.${{ github.run_number }}"

jobs:
  CI:
    name: Build & push ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_USR_ECR }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_USR_ECR }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REPOSITORY_URI: ${{ secrets.REPOSITORY_URI }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        docker build -t $REPOSITORY_URI:$IMAGE_TAG .
        docker push $REPOSITORY_URI:$IMAGE_TAG
  CD:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [CI]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_USR_ECR }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_USR_ECR }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Update with the image ID in the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: "${{ secrets.REPOSITORY_URI }}:${{ env.IMAGE_TAG }}"
    - name: Deploy the new task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true